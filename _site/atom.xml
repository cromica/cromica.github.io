<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Romulus Crisan</title>
 <link type="application/atom+xml" href="http://romuluscrisan.com/atom.xml" rel="self"/>
 <link href="http://www.romuluscrisan.com/"/>
 <updated>2015-04-04T16:41:02+03:00</updated>
 <id>http://www.romuluscrisan.com/</id>
 <author>
   <name>Romulus Crisan</name>
   <email>cromica@gmail.com</email>
 </author>
 
 
 <entry>
   <title>Merge files using SDL Studio Project Automation API</title>
   <link href="http://www.romuluscrisan.com/sdl%20studio/2015/03/11/Merge-translatable-files-using-SDL-Studio-Project-automation-api.html"/>
   <updated>2015-03-11T21:20:00+02:00</updated>
   <id>http://www.romuluscrisan.com/sdl%20studio/2015/03/11/Merge-translatable-files-using-SDL-Studio-Project-automation-api</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/merge-files/merge.jpg&quot; alt=&quot;Click&#39;n&#39;Deploy&quot; title=&quot;Merge files&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;SDL Studio allows the user to merge multiple files into one bilingual document (sdlxliff). This can be done during project creation and it can be useful in situations where you have multiple small files and you might want to translate them in one go without switching between documents. If you don&#39;t already know SDL Studio is very extensible via the API&#39;s that are made available but sometimes simple things are not so simple to do by code because of software design decision or technical limitations. Merging files using SDL Studio Project Automation API can be done but is not that straight forward as you might expect and this is why I decided to write this article to show how this is done.&lt;/p&gt;

&lt;h3&gt;Create Merged Project File&lt;/h3&gt;

&lt;p&gt;Looking at the documentation you can easily find &lt;a href=&quot;http://producthelp.sdl.com/SDK/ProjectAutomationApi/3.0/html/8c0d6583-c31c-365b-0819-ff19e18e1f5e.htm&quot;&gt;CreateMergedProjectFile&lt;/a&gt; method which allows you to specify the files you want to be merged and the name of the bilingual file which must have &amp;quot;.sdlxliff&amp;quot; extension. At this point this seems to be very simple but when you run this method you realize that is not actually doing much, there is no visible result on the project and the status is &lt;em&gt;Not Merged&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;What am I missing?&lt;/h3&gt;

&lt;p&gt;At this point you only get an &lt;a href=&quot;http://producthelp.sdl.com/SDK/ProjectAutomationApi/3.0/html/4ea34241-0524-aac3-45fa-817765b3bc5e.htm&quot;&gt;MergedProjectFile&lt;/a&gt; object which is just a representation of the merging structure. In order to actually create the bilingual merged file we need to use &lt;a href=&quot;http://producthelp.sdl.com/SDK/FileTypeSupport/3.0/html/1f5584af-9763-46ff-894b-08127a2421a7.htm&quot;&gt;Studio File Type Framework&lt;/a&gt; to generate the sdlxliff file. Once we have that we can use &lt;em&gt;CopyToTargetLanguages&lt;/em&gt; to copy the merged files to all target languages we need. To make this even more clear and concrete I&amp;#39;m going to share a sample code that is doing all the steps I&amp;#39;ve described until now.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/cromica/af1242f60511c52fba79.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s not that complicated to merge files using the SDL Studio API but is not obvious and intuitive. I hope this article will clarify this situation. &lt;/p&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sdl Studio PowerShell toolkit is now open source</title>
   <link href="http://www.romuluscrisan.com/sdl%20studio/2015/02/18/Sdl-Studio-PowerShell-toolkit-open-source.html"/>
   <updated>2015-02-18T21:20:00+02:00</updated>
   <id>http://www.romuluscrisan.com/sdl%20studio/2015/02/18/Sdl-Studio-PowerShell-toolkit-open-source</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/studio-powershell-toolkit/open-source.png&quot; alt=&quot;Click&#39;n&#39;Deploy&quot; title=&quot;Click&#39;n&#39;Deploy&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;Starting from today Sdl Studio powerhsell toolkit is open source and you can find it on github. The toolkit was written to facilitate scripting of the Project Automation API which comes with SDL Studio. Until now this was kept on the SDL internal TFS and you where only able to get it by going to the community forum. At this point you might ask yourself what&#39;s going to change from now on since the toolkit was freely distributed until now?&lt;/p&gt;

&lt;h3&gt;Github&lt;/h3&gt;

&lt;p&gt;The project is now hosted on github in this &lt;a href=&quot;https://github.com/sdl/Sdl-studio-powershell-toolkit&quot;&gt;location&lt;/a&gt;. The internal TFS will no longer be used so this means that every change that will be made to the toolkit will be made on this repository including changes done by Sdl developers. Also this allows any interested developer to contribute to the toolkit. &lt;/p&gt;

&lt;p&gt;Public releases are also hosted on github and you can be find them &lt;a href=&quot;https://github.com/sdl/Sdl-studio-powershell-toolkit/releases/&quot;&gt;here&lt;/a&gt;. You are now able to download the entire toolkit or just one of the modules. &lt;/p&gt;

&lt;h3&gt;Open source&lt;/h3&gt;

&lt;p&gt;Open source it&amp;#39;s not at all equal to free, it&amp;#39;s much more than that. Yes you don&amp;#39;t have to pay any money for this toolkit but from now on is not only Sdl&amp;#39;s responsibility to maintain this toolkit, it&amp;#39;s also the responsibility of each toolkit user or developer. To be a bit more specific if you find bug or want a new feature you can log it &lt;a href=&quot;https://github.com/sdl/Sdl-studio-powershell-toolkit/issues&quot;&gt;here&lt;/a&gt; but don&amp;#39;t necessarily expect someone from Sdl to resolve the issue, it might be anyone from the community or even you.&lt;/p&gt;

&lt;p&gt;Another important aspect that comes with open source is that every change you made to this toolkit has to be made open source. It&amp;#39;s not mandatory to be made in the same repository but it has to be open source. I would encourage everyone to contribute to this repository and make the resolved issues available to everyone.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Contribute to Sdl Studio PowerShell toolkit from &lt;a href=&quot;https://github.com/sdl/Sdl-studio-powershell-toolkit&quot;&gt;here&lt;/a&gt; or download the latest release from &lt;a href=&quot;https://github.com/sdl/Sdl-studio-powershell-toolkit/releases/tag/1.0.0.0&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Click'n'Deploy Studio plugins</title>
   <link href="http://www.romuluscrisan.com/sdl%20studio/2015/02/13/Click-n-deploy%20Studio%20plugins.html"/>
   <updated>2015-02-13T01:20:00+02:00</updated>
   <id>http://www.romuluscrisan.com/sdl%20studio/2015/02/13/Click-n-deploy Studio plugins</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/cromica/clickn-deploy&quot; taget=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/images/posts//click-n-deploy/click-n-deploy.png&quot; alt=&quot;Click&#39;n&#39;Deploy&quot; title=&quot;Click&#39;n&#39;Deploy&quot; class=&quot;img-responsive&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;App stores changed the way we install and maintain software on our devices. You now have a single centralized place where you go and search for what you need, click a button and in a matter of minutes you have the app working on your device. In a similar way you can extend SDL Studio by going on &lt;a href=&quot;http://www.translationzone.com/openexchange/&quot;&gt;OpenExchange&lt;/a&gt; store and download a plugin you would like or need. Now this works just fine for most of the Studio plugins or apps but there are situations when you need to develop something that is specific for your company and doesn&#39;t make sense to be public to everyone since it&#39;s probably irrelevant for them and it might also contain confidential information. It would be nice if you would be able to create your private store inside &lt;a href=&quot;http://www.translationzone.com/openexchange/&quot;&gt;OpenExchange&lt;/a&gt; where you can have you apps centralized and search-able just by you  but such a feature is not available at the moment. This article and video is about an alternate solution for this type of scenarios.&lt;/p&gt;

&lt;h3&gt;The solution&lt;/h3&gt;

&lt;p&gt;The solution is very simple and is based on the idea to automate as much as possible the process of releasing you plugin. The exact same thing is promoted by &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt;  practice and together with the evolution of this a couple of release management tools like &lt;a href=&quot;https://octopusdeploy.com/&quot;&gt;Octopus Deploy&lt;/a&gt; or &lt;a href=&quot;http://www.thoughtworks.com/products/go-continuous-delivery&quot;&gt;GO&lt;/a&gt; appeared in order to ease the adoption of such a practice. In our case since Studio plugins are developed using &lt;a href=&quot;http://www.microsoft.com/net&quot;&gt;Microsoft .Net&lt;/a&gt; and it makes perfect sense to use &lt;a href=&quot;https://octopusdeploy.com/&quot;&gt;Octopus Deploy&lt;/a&gt; since is dedicated for .Net solutions. Of course you can try and use &lt;a href=&quot;http://www.thoughtworks.com/products/go-continuous-delivery&quot;&gt;GO&lt;/a&gt; or any other release management tool you prefer. If it&amp;#39;s not clear by now the solution I&amp;#39;m talking about is to automate your Studio plugin release management using &lt;a href=&quot;https://octopusdeploy.com/&quot;&gt;Octopus Deploy&lt;/a&gt;.   &lt;/p&gt;

&lt;h3&gt;Octopus Deploy&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m not going to cover in detail &lt;a href=&quot;https://octopusdeploy.com/&quot;&gt;Octopus Deploy&lt;/a&gt; since it comes with a very good documentation, rather I&amp;#39;m going to present a higher level overview of how is going to work with Studio plugins. Octopus comes with a central server component which is called &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Installing+Octopus&quot;&gt;Octopus Deploy Server&lt;/a&gt; that you need to install somewhere where all your users machines will be able to access it. It can be an internal private server, a public server or somewhere in a cloud platform, there is no limitation as long as it&amp;#39;s accessible. &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Installing+Octopus&quot;&gt;Octopus Deploy Server&lt;/a&gt; comes with web user interface which you can use once you have the server installed. Besides the server component Octopus comes with a client component called &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Installing+Tentacles&quot;&gt;Tentacle Deploy agent&lt;/a&gt;. This has to be installed on each user machine and it will be used to deploy your software, in our case the Studio plugins. This is a one time operation and once it&amp;#39;s done you will only use the web user interface that comes with the server. There is a third component called &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Using+OctoPack&quot;&gt;OctoPack&lt;/a&gt; that is used to push the software/Studio plugin from you development or build machine to &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Installing+Octopus&quot;&gt;Octopus Deploy Server&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;Click&amp;#39;n&amp;#39;Deploy Studio plugins&lt;/h3&gt;

&lt;p&gt;There are quit a few moving parts when you first setup &lt;a href=&quot;https://octopusdeploy.com/&quot;&gt;Octopus Deploy&lt;/a&gt; and some of the steps might not that obvious so instead off writing them in this article I decided that it would be better if just create a video to show you exactly how you configure Octopus to release Studio plugins to the user machine. &lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mMDnY73D1x8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Useful learning resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Getting+started&quot;&gt;Octopus Deploy Getting Started&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Installing+Octopus&quot;&gt;Installing Octopus Deploy Server&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Installing+Tentacles&quot;&gt;Installing Tentacles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Using+OctoPack&quot;&gt;Using OctoPack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.nuget.org/&quot;&gt;What is Nuget?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.translationzone.com/openexchange/developer/sdk.html&quot;&gt;Develop SDL Studio plugins&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to access segment tags using Studio File Type Framework</title>
   <link href="http://www.romuluscrisan.com/sdl%20studio/2015/01/06/How%20to%20access%20segment%20tags%20using%20Studio%20File%20Type%20Framework%20.html"/>
   <updated>2015-01-06T18:20:00+02:00</updated>
   <id>http://www.romuluscrisan.com/sdl%20studio/2015/01/06/How to access segment tags using Studio File Type Framework </id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/segmentTags/segments.png&quot; alt=&quot;Assembly Resolver&quot; title=&quot;Assembly Resolver&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;Accessing segment tags might not be something you have to do everyday but there might be some scenarios where you need to manipulate the tags of your segments. This can be done using Studio File Type Framework which is part of the Studio SDK. The documentation is providing an overview of the entire framework and also includes high level overview of what I&#39;m going to discuss in this article. &lt;/p&gt;

&lt;h3&gt;Visitor Pattern&lt;/h3&gt;

&lt;p&gt;Before jumping into the problem I recommend you to get familiarized with the visitor pattern since this is used as part of the Studio File Type Framework and you will need apply it in order to get the tags. To get familiarized you can read the theory on &lt;a href=&quot;http://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;wikipedia&lt;/a&gt; or if you want a practical example you can have a look &lt;a href=&quot;http://www.codeproject.com/Articles/588882/TheplusVisitorplusPatternplusExplained&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Studio File Type Framework visitor pattern is made available via &lt;em&gt;IMarkupDataVisitor&lt;/em&gt; interface. &lt;/p&gt;

&lt;h3&gt;Paragraphs, Segments and more&lt;/h3&gt;

&lt;p&gt;When a document is opened for translation Studio brakes it into segments. This is done by the segmentation engine using the segmentation rules defined in Studio. A segment can be a paragraph or a sentence length but what is important to understand is that for Studio a segment represents a piece of localizable content for which existing translations can possibly be used. Besides localizable content there are other elements, like formatting, that Studio needs to take into considerations.&lt;/p&gt;

&lt;p&gt;Now that we have a better understanding of how Studio is handling the content let me highlight how this is reflected in the File Type Framework:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IParagraph&lt;/code&gt; represents the entire content that is displayed on one Studio editor row. This can contain multiple elements like tags or segments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IParagraphUnit&lt;/code&gt; a unit of source language content and the localized target language content. Source and Target can be accessed using the corresponding properties which will return an &lt;em&gt;IParagraph&lt;/em&gt; object instance with the information described above. One thing to keep in mind is that there are two type of paragraph units:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Structure paragraph units will contain only structure tags that are not localizable. In this case the Target will be null.&lt;/li&gt;
&lt;li&gt;Localizable paragraph units will contain localizable content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;ISegment&lt;/code&gt; represents a piece of localizable content.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ISegmentPair&lt;/code&gt; segments exists in source and target language versions which are bot accessible using &lt;em&gt;ISegmentPair&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Segments and Paragraphs are considered containers of other elements like text, comments, revisions and so on. All containers share common behavior and that&amp;#39;s why in the File Type Framework both are abstracted using &lt;em&gt;IAbstractMarkupDataContainer&lt;/em&gt;. An &lt;em&gt;IAbstractMarkupDataContainer&lt;/em&gt; contains multiple &lt;em&gt;IAbstractMarkupData&lt;/em&gt; elements. This means that text, comments and other similar elements are represented in the framework using &lt;em&gt;IAbstractMarkupData&lt;/em&gt; interface. One very important aspect of this structure is the fact that a segment can be considered as an element of the paragraph but also as a container for other elements which means that it can be manipulated as an &lt;em&gt;IAbstractMarkupDataContainer&lt;/em&gt; or as an &lt;em&gt;IAbstractMarkupData&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a diagram which describes the structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/segmentTags/abstractmarkupdatacontainer.png&quot; alt=&quot;Abstract Markup Data Container&quot; title=&quot;Abstract Markup Data Container&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Access segment tags&lt;/h3&gt;

&lt;p&gt;All paragraph elements are like a tree structure that must be traversed using visitor pattern. For each paragraph unit we can look at the Source property which is an &lt;em&gt;IParagraph&lt;/em&gt;. Thinking at the abstraction I was talking earlier an &lt;em&gt;IParagraph&lt;/em&gt; is in essence an &lt;em&gt;IAbstractMarkupDataContainer&lt;/em&gt; which in turn is an enumeration of &lt;em&gt;IAbstractMarkupData&lt;/em&gt;. Here&amp;#39;s a sample code on how you can iterate paragraph unit elements:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAbstractMarkupData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paragraphUnit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//structure tag is not supported by IMarkupDataVisitor and you should ignore it&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IStructureTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IStructureTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                       
      &lt;span class=&quot;n&quot;&gt;contentItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcceptVisitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarkupDataVisitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is one new thing in the above sample which I didn&amp;#39;t discuss about.This is &lt;em&gt;MarkupDataVisitor&lt;/em&gt; which is an implementation of the interface &lt;em&gt;IMarkupDataVisitor&lt;/em&gt; I was mentioning in the visitor pattern section. Here&amp;#39;s how the interface looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Interface for the visitor in the visitor pattern implementation for translatable source / target &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// content items in a localizable paragraph unit.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMarkupDataVisitor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by tag pair instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;tagPair&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitTagPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ITagPair&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by placeholder tag instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;tag&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitPlaceholderTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPlaceholderTag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by text instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by segment instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;segment&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitSegment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISegment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by location marker instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;location&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitLocationMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILocationMarker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by comment marker instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;commentMarker&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitCommentMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICommentMarker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by other marker instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;marker&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitOtherMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOtherMarker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by locked content instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;lockedContent&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitLockedContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILockedContent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockedContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Called by revision marker instances.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;revisionMarker&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VisitRevisionMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IRevisionMarker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revisionMarker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see you are now able manipulate each element type. For example if you need formatting information you can get it from the &lt;em&gt;ITagPair&lt;/em&gt; interface. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#39;t forget&lt;/strong&gt; that segments are containers as well so on &lt;em&gt;VisitSegement&lt;/em&gt; method you need to traverse his structure in the same way as for the paragraph unit.&lt;/p&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SDL Studio standalone plugin assembly resolver</title>
   <link href="http://www.romuluscrisan.com/sdl%20studio/2014/11/28/SDL-Studio-standalone-plugin-assembly-resolve.html"/>
   <updated>2014-11-28T14:20:00+02:00</updated>
   <id>http://www.romuluscrisan.com/sdl%20studio/2014/11/28/SDL-Studio-standalone-plugin-assembly-resolve</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/assemblyresolver/assemblyresolver.jpg&quot; alt=&quot;Assembly Resolver&quot; title=&quot;Assembly Resolver&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;SDL Studio plugin system allows developers to develop new features on top of the standard functionality. There are 2 types of plugins that can be developed, one which behaves like a Studio add-in and another one which behaves as a standalone application. Both plugin types require to run inside Studio installation folder. This is because the public Studio SDK is using other assemblies that are located in Studio folder. While this is perfectly fine for add-in type plugins for standalone plugins this adds limitation on where and how you can deploy your application.&lt;/p&gt;

&lt;h3&gt;Why not GAC ?&lt;/h3&gt;

&lt;p&gt;Many developers have asked us to register Studio assemblies in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yf1d93sz%28v=vs.110%29.aspx&quot;&gt;GAC&lt;/a&gt; in order to solve the issue on where and how you can deploy your standalone Studio plugins. Having Studio assemblies registered in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yf1d93sz%28v=vs.110%29.aspx&quot;&gt;GAC&lt;/a&gt; means that those assembly can be shared across the entire system. Although registering assemblies in GAC might had seem to be a good solution there are many implications when doing it. The main reason why Studio is not using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/yf1d93sz%28v=vs.110%29.aspx&quot;&gt;GAC&lt;/a&gt; is because of the following scenario:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GAC supports multiple version of an assembly. This means that when an assembly is updated to a newer version both versions will be saved. You might say that the old version should be removed, but this is not always possible since for example there are customers that have multiple version of Studio that are used on the same machine. Keeping multiple version of the same assembly will lead to unexpected behavior and errors from the application.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can read more about why to avoid GAC &lt;a href=&quot;http://www.sellsbrothers.com/Posts/Details/12503&quot;&gt;here&lt;/a&gt;.   &lt;/p&gt;

&lt;h3&gt;Got it ... no GAC, but we want solutions!&lt;/h3&gt;

&lt;p&gt;To solve this problem I&amp;#39;ve developed a small library called &lt;strong&gt;Studio AssemblyResolver&lt;/strong&gt;. Basically every time an dll is not found in the current application location the library will look after the dll in the Studio folder. The library comes with 2 mechanism for looking after Studio folder but you can add your own resolve mechanism. If you are interested about more details please have a look &lt;a href=&quot;https://github.com/cromica/Studio-AssemblyResolver&quot;&gt;here&lt;/a&gt;. The library is also published in the &lt;a href=&quot;https://www.nuget.org/packages/Studio.AssemblyResolver/0.1.1&quot;&gt;Nuget package repository&lt;/a&gt; which allows to be easily added to your project.&lt;/p&gt;

&lt;h3&gt;How to use Studio AssemblyResolver&lt;/h3&gt;

&lt;p&gt;There are 2 simple steps to get your Studio assemblies resolved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a reference to the &lt;strong&gt;Studio.AssemblyResolver&lt;/strong&gt; library from Visual Studio using NuGet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/assemblyresolver/managenuget.png&quot; alt=&quot;Manage Nuget&quot; title=&quot;Manage Nuget&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/assemblyresolver/nugetassemblyresolver.png&quot; alt=&quot;Nuget assembly resolver&quot; title=&quot;Nuget assembly resolver&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the following line of code in you application entry point&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;AssemblyResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;#39;ve already included the &lt;strong&gt;Studio AssemblyResolver&lt;/strong&gt; library in &lt;a href=&quot;https://github.com/sdl/SDL-Community/tree/master/Reindex%20Translation%20Memories&quot;&gt;Reindex Translation Memories&lt;/a&gt; plugin. You can have a look &lt;a href=&quot;https://github.com/sdl/SDL-Community/blob/master/Reindex%20Translation%20Memories/Sdl.Community.ReindexTms/Program.cs#L18&quot;&gt;here&lt;/a&gt; if you are interested to see how I&amp;#39;ve included the library.&lt;/p&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>3rd party assemblies and SDL Studio plugins</title>
   <link href="http://www.romuluscrisan.com/sdl%20studio/2014/11/07/3rd-party-assmeblies-and-SDL-Studio-plugins.html"/>
   <updated>2014-11-07T18:18:00+02:00</updated>
   <id>http://www.romuluscrisan.com/sdl%20studio/2014/11/07/3rd-party-assmeblies-and-SDL-Studio-plugins</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/3rdparty/3rdpartyassemblies.png&quot; alt=&quot;Hello SDL&quot; title=&quot;Hello SDL&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;Last week I was working at a new plugin for SDL Studio 2014 and I wanted to serialize some information in json. The best tool handle this type of operations in .NET, at least in my opinion, is &lt;a href=&quot;http://james.newtonking.com/json&quot; target=&quot;_blank&quot;&gt;Json.NET&lt;/a&gt;. It made perfect sense to use it but until now I didn&#39;t use any external dependencies in an SDL Studio plugin so I started to look into what options we have to deploy our plugins together with 3rd party assemblies.&lt;/p&gt;

&lt;h3&gt;SDL Studio plugins&lt;/h3&gt;

&lt;p&gt;This is not a detailed look at what SDL Studio plugins are but I want to give a bit of context on how they are working. First of all each plugin has to be packed in a package with extension &lt;code&gt;.sldplugin&lt;/code&gt; (this a zip file in essence). If you use the SDL Studio templates from Visual Studio this done for you automatically. Once you have the package you need to deploy it in one of the three location where SDL Studio is expecting plugins:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$(CurrentUser)\AppData\Local\SDL\SDL Trados Studio{Studio Version}\Plugins\Packages\&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$(CurrentUser)\AppData\Roaming\SDL\SDL Trados Studio{Studio Version}\Plugins\Packages\&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$(ProgramData)\SDL\SDL Trados Studio{Studio Version}\Plugins\Packages\&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is no difference between this locations so you can choose whatever you prefer. Once the package is in one of this locations when SDL Studio starts it will unpack the package, drop the content into a dedicated location and load the plugin assembly. This depends on where you deployed your package and can be one of this locations:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$(CurrentUser)\AppData\Local\SDL\SDL Trados Studio{Studio Version}\Plugins\Unpacked\&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$(CurrentUser)\AppData\Roaming\SDL\SDL Trados Studio{Studio Version}\Plugins\Unpacked\&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$(ProgramData)\SDL\SDL Trados Studio{Studio Version}\Plugins\Unpacked\&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Deploy 3rd party assemblies&lt;/h3&gt;

&lt;p&gt;Now that we have a brief understanding on how SDL Studio handles plugins let&amp;#39;s see what options we have to deploy 3rd party plugins:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Include the assemblies in the plugin package&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an installer which will copy the 3rd party assemblies into SDL Studio folder under $(ProgramFiles)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although the second option can work I don&amp;#39;t like it because it requires more work, administrative rights to deploy the assemblies and might intefere with Studio installation. This was also suggest by &lt;a href=&quot;https://community.sdl.com/members/davidfritch/default.aspx&quot;&gt;David Fritch&lt;/a&gt; in this &lt;a href=&quot;https://community.sdl.com/phase_2_groups/sdl_openexchange_developers/f/39/t/3149.aspx&quot;&gt;thread&lt;/a&gt; as a possible way to do it.&lt;/p&gt;

&lt;p&gt;I consider the first option the right way to do it since it&amp;#39;s very simple and clean. All you have to do is change the &lt;code&gt;pluginpackage.manifest.xml&lt;/code&gt; which has to be part of the solution in order to generate the &lt;code&gt;.sdlplugin&lt;/code&gt; file. By default this xml file contains some tags to specify the plugin name, version, description, author and required SDL Studio product. You will need to add an &lt;code&gt;&amp;lt;Include&amp;gt;&lt;/code&gt; tag which in my case, for &lt;a href=&quot;http://james.newtonking.com/json&quot;&gt;Json.NET&lt;/a&gt;, looked something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Include&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;File&amp;gt;&lt;/span&gt;Newtonsoft.Json.dll&lt;span class=&quot;nt&quot;&gt;&amp;lt;/File&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Include&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;You can have a look at my entire xml file &lt;a href=&quot;https://github.com/sdl/SDL-Community/blob/master/Controlled%20Machine%20Translation%20Providers/Sdl.Community.ControlledMTProviders/pluginpackage.manifest.xml#L9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Codecamp 2014</title>
   <link href="http://www.romuluscrisan.com/speaker/2014/10/31/Codecamp-2014.html"/>
   <updated>2014-10-31T11:07:00+02:00</updated>
   <id>http://www.romuluscrisan.com/speaker/2014/10/31/Codecamp-2014</id>
   <content type="html">&lt;div class=&quot;owl-carousel text-left&quot; data-navigation=&quot;true&quot; data-singleitem=&quot;true&quot; data-autoplay=&quot;true&quot; data-transition=&quot;fade&quot;&gt;
    &lt;div class=&quot;item dragCursor&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/codecamp2014/1.jpg&quot; class=&quot;img-responsive&quot;  alt=&quot;img&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item dragCursor&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/codecamp2014/2.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;img&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item dragCursor&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/codecamp2014/3.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;img&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item dragCursor&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/codecamp2014/4.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;img&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item dragCursor&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/codecamp2014/5.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;img&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;                  

&lt;p class=&quot;dropcap&quot;&gt;One of my personal objectives for this year was to attend as a speaker to local community developer conferences. Most known,at least by me, are ITCamp and Codecamp. ITCamp is held once a year in Cluj-Napoca and Codecamp is held twice a year in Iasi, although there are some smaller Codecamp events in Cluj those are not related. I&#39;m really happy that this year I had the opportunity to participate at all 3 events, so a big big thanks to the organizers for having me.&lt;/p&gt;

&lt;h3&gt;Codecamp&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve never been to Iasi until this year and I can&amp;#39;t say that I&amp;#39;ve seen too much of it since both times I&amp;#39;ve been there I was caught up with &lt;a href=&quot;http://iasi.codecamp.ro/&quot;&gt;Codecamp&lt;/a&gt; event. Although I&amp;#39;ve haven&amp;#39;t seen much of the city I&amp;#39;ve met really nice people which are really passionate about software industry. Each event had more than 1400 participants which I believe it&amp;#39;s a really big achievement. The fact that there is no fee to participate at the conference opened the door even to students which had a great opportunity to get in touch with the industry and basically their future. The event is also for seniors who can find lots interesting topics and a good place to network.&lt;/p&gt;

&lt;p&gt;For me &lt;a href=&quot;http://iasi.codecamp.ro/&quot;&gt;Codecamp&lt;/a&gt; was a nice experience and I can&amp;#39;t wait for the next edition which will probably happen in spring 2015. Kudos to &lt;a href=&quot;https://ro.linkedin.com/in/cardasim&quot;&gt;Florin Cardasim&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/gabrielenea&quot;&gt;Gabriel Enea&lt;/a&gt; and &lt;a href=&quot;http://ro.linkedin.com/in/dannicola&quot;&gt;Dan Nicola&lt;/a&gt; who believed in their ideas and made this possible.&lt;/p&gt;

&lt;h3&gt;My sessions&lt;/h3&gt;

&lt;p&gt;I had two session which I presented this year at &lt;a href=&quot;http://iasi.codecamp.ro/&quot;&gt;Codecamp&lt;/a&gt;. The first one which I&amp;#39;ve done in may is &lt;strong&gt;Information Exchange using Hybrid Azure Integration&lt;/strong&gt;. In this session I&amp;#39;m talking about ways we can integrate on-premise LOB applications with azure cloud solutions based on messaging pattern. The second session which I had last weekend is &lt;strong&gt;Click&amp;#39;n&amp;#39;Deploy&lt;/strong&gt;. This one was done together with &lt;a href=&quot;http://www.radupascal.com/&quot;&gt;Radu Pascal&lt;/a&gt; and it was my first duet session. In this talk we present our approach on enabling continuous integration and continuous deployment using &lt;a href=&quot;http://www.visualstudio.com/en-us/get-started/build-your-apps-vs.aspx&quot;&gt;TFS Build&lt;/a&gt;, &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; and &lt;a href=&quot;https://octopusdeploy.com/&quot;&gt;Octopus Deploy&lt;/a&gt;. During the session we showed how we&amp;#39;ve implemented it in a real life example.&lt;/p&gt;

&lt;p&gt;If want to see more pictures have a look &lt;a href=&quot;https://plus.google.com/photos/107459365520380827818/albums/6076078203903397409&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Information Exchange using Hybrid Azure Integration slides&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;6ed4e240af78013157f156ebe6298001&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Click&amp;#39;n&amp;#39;Deploy slides&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;b0db24f042710132bd3a62fe72f26203&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Please leave a comment if you have any questions or feedback. If you are interested in presenting this sessions just send me an email.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello SDL</title>
   <link href="http://www.romuluscrisan.com/career/2014/10/01/hello-sdl.html"/>
   <updated>2014-10-01T17:15:00+03:00</updated>
   <id>http://www.romuluscrisan.com/career/2014/10/01/hello-sdl</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/sdl.jpg&quot; alt=&quot;Hello SDL&quot; title=&quot;Hello SDL&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;I now have two weeks since I joined SDL as a &lt;i&gt;Language Platform Evangelist Developer&lt;/i&gt;. Almost everyone asked me what does that mean and what will I do so I decided that I better explain here in detail. If you are looking for a general definition of the position you can find one on wikipedia but it won&#39;t help you too much. In order to understand it better you really need to understand the context.&lt;/p&gt;

&lt;h3&gt;Who is SDL?&lt;/h3&gt;

&lt;p&gt;First off all let me tell you a few words about SDL and what is the company doing. It started as language translation service company and quickly become also a company providing software for language translation. For many years this was the only domain where SDL activated but new interesting opportunities arise and the company made new acquisitions on domains like e-commerce, social media monitoring, web content management, analytics and so on. All this new products allowed SDL to re-position itself recently as a &lt;a href=&quot;http://www.sdl.com/solutions/business-need/global-customer-experience-management/&quot;&gt;global customer experience management&lt;/a&gt; company. If you are looking for more details please have a look &lt;a href=&quot;http://www.sdl.com/aboutus/aboutsdl/history.html&quot;&gt;here&lt;/a&gt; for the history of the company and &lt;a href=&quot;http://www.sdl.com/aboutus/aboutsdl/vision-mission.html&quot;&gt;here&lt;/a&gt; for the new vision and mission.&lt;/p&gt;

&lt;h3&gt;What I&amp;#39;m going to do at SDL?&lt;/h3&gt;

&lt;p&gt;As I previously said SDL is offering now &lt;a href=&quot;http://www.sdl.com/solutions/business-need/global-customer-experience-management/&quot;&gt;global customer experience management&lt;/a&gt; and as you might already think when you say global you immediately think of multiple languages, which means translation. &lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to be closely involved in &lt;a href=&quot;http://www.sdl.com/products/sdl-trados-studio/&quot;&gt;SDL Trados Studio&lt;/a&gt; and &lt;a href=&quot;https://languagecloud.sdl.com/&quot;&gt;Language Cloud&lt;/a&gt; and probably some other products depending on the needs. Most of my work will be around creating and growing the development community for this products, but I will also offer support and consultancy to clients and help the sale process when is necessary. Growing the development community can mean many things but here are some of they key things I will do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Explain better the current Studio API&amp;#39;s and in what product areas it can be used.&lt;/li&gt;
&lt;li&gt;Improve and simplify the current API based on community and clients feedback.&lt;/li&gt;
&lt;li&gt;Contribute to the new Language Cloud SDK.&lt;/li&gt;
&lt;li&gt;Simplify how we can use develop against the API&amp;#39;s. The most important bit will be to have them open to all possible developers.&lt;/li&gt;
&lt;li&gt;Speak at developer conferences and discuss about the API&amp;#39;s and SDK&amp;#39;s. If you have any suggestion or you want me at a conference just leave a comment.&lt;/li&gt;
&lt;li&gt;Contribute and help develop the new community platform which we will launch in the near future.&lt;/li&gt;
&lt;li&gt;Develop plugins based on customer needs. This will also act as examples for other developers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think this is very interesting and I&amp;#39;m really keen to see how things will evolve since there are many other things that I would like to do as part of my new role. Also SDL has some interesting plans around the community so stay tuned.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Thank you Endava</title>
   <link href="http://www.romuluscrisan.com/career/2014/09/20/thank-you-endava.html"/>
   <updated>2014-09-20T21:53:00+03:00</updated>
   <id>http://www.romuluscrisan.com/career/2014/09/20/thank-you-endava</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/endava.jpg&quot; alt=&quot;Thank you Endava&quot; title=&quot;Thank you Endava&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p class=&quot;dropcap&quot;&gt;This week I had my last day as an Endava employee since I&#39;ve accepted a new challenge, but more about that in a later post. Endava is a company that constantly tries to improve based on previous experiences and feedback so last week I had brief exit interview which is meant to provide feedback to the company. I have to admit that I really enjoyed this last discussion where I had one last opportunity to directly share my ideas with Endava.&lt;/p&gt;

&lt;p&gt;My journey with Endava was about 7 years and a half. All this years had a great impact on my career and who am I today. When I joined the company I was a naive developer who was just interested in writing some code but slowly that changed because the company was constantly taking care of my growth and career path. I really think that Endava provides a great working environment where you can learn, grow and expand your skills regardless of the fact that you are just starting your career or you have several years of experience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/endava_colleagues.jpg&quot; alt=&quot;Thank you Endava&quot; title=&quot;Thank you Endava&quot; class=&quot;img-responsive&quot;&gt;&lt;/p&gt;

&lt;p&gt;Certainly I will miss my colleagues from Endava with which I shared so many great experiences, but I&amp;#39;m still going to be around so don&amp;#39;t be a stranger suddenly. I want to thank you all for your great support and help during all this years.&lt;/p&gt;

&lt;p&gt;But because I&amp;#39;m leaving it doesn&amp;#39;t mean that we can&amp;#39;t stay in touch. For sure I&amp;#39;m going to post more often on this blog so you can leave a comment or find me on Twitter, Linkedin, Facebook, Gmail.&lt;/p&gt;

&lt;p&gt;Thanks Endava for all this great years.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Journey to start a blog</title>
   <link href="http://www.romuluscrisan.com/blog/2014/03/15/my-journey-to-start-a-blog.html"/>
   <updated>2014-03-15T09:40:00+02:00</updated>
   <id>http://www.romuluscrisan.com/blog/2014/03/15/my-journey-to-start-a-blog</id>
   <content type="html">&lt;p class=&quot;dropcap&quot;&gt;Now that I written some articles around my journey to start a blog I think it might be very useful to have a short summary of my journey.&lt;/p&gt;

&lt;h3&gt;The Journey&lt;/h3&gt;

&lt;p&gt;Well I was thinking to start a blog for sometime because of the reasons I&amp;#39;ve pointed in my first article &lt;a href=&quot;http://romuluscrisan.com/blog/2014/02/23/why-a-blog.html&quot;&gt;Why a blog ?&lt;/a&gt;. This is a technical blog since I will write most of the time about software development and various technologies in an attempt to share my knowledge and experience but also because I want to us it as a brain dump. From time to time I might write about  some other things but probably still around technology. &lt;/p&gt;

&lt;p&gt;Finally this year I started looking for various options to host a blog and I ended up using &lt;a href=&quot;http://pages.github.com/&quot;&gt;Github pages&lt;/a&gt;. Why I made this option I&amp;#39;ve detailed in my blog post &lt;a href=&quot;http://romuluscrisan.com/blog/2014/02/24/why-i-choose-github-pages.html&quot;&gt;Why I choose Github pages&lt;/a&gt;. Github pages is powered by a very nice and interesting framework called Jekyll for which I wrote an introduction  in my article &lt;a href=&quot;http://romuluscrisan.com/blog/2014/03/03/the-engine-behind-my-blog.html&quot;&gt;The engine behing my blog&lt;/a&gt;. Since my work is most of the time in Microsoft world I had to install Jekyll on Windows which is not necessarily straight forward so I described an easier alternative using chocolatey in my article &lt;a href=&quot;http://romuluscrisan.com/jekyll/2014/03/06/install-jekyll-using-chocolatey.html&quot;&gt;Install Jekyll using chocolatey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m really glad that finally I manage to start this blog but I guess the real challenge comes now when I will need to actually use it and keep it alive. I hope you will find my journey useful to decide start a blog or if you are already decided to assist in your steps to get the blog started.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Install Jekyll using Chocolatey</title>
   <link href="http://www.romuluscrisan.com/jekyll/2014/03/06/install-jekyll-using-chocolatey.html"/>
   <updated>2014-03-06T21:14:00+02:00</updated>
   <id>http://www.romuluscrisan.com/jekyll/2014/03/06/install-jekyll-using-chocolatey</id>
   <content type="html">&lt;p class=&quot;dropcap&quot;&gt;As you probably already know this website and blog are created using github pages which behind the scene uses Jekyll. More on this you can read on my &lt;a href=&quot;http://romuluscrisan.com/blog/2014/03/03/the-engine-behind-my-blog.html&quot;&gt;blog post&lt;/a&gt;.Every time I write a new article or make a change I would like to preview it before publishing it to live website.When this get published to my website repository, Github builds it almost instantly so I&#39;m able to see my change really fast, but this is still done on the public website. This can work pretty well but I prefer to see my changes locally and only if I&#39;m ok to publish them on my &lt;a href=&quot;https://github.com/cromica/cromica.github.io&quot;&gt;repository&lt;/a&gt;. So in order to do that I need to install jekyll on my local machine and use `jekyll serve` to build and serve the website.&lt;/p&gt;

&lt;h3&gt;Install Jekyll on a Windows machine&lt;/h3&gt;

&lt;p&gt;Jekyll is build with Ruby and uses some Python libraries so we need to install them in order to run Jekyll. Since most the work I do is around Microsoft .Net platform I need to use Windows operating system . My source of inspiration was this &lt;a href=&quot;http://blog.davidebbo.com/2014/01/converting-my-old-blog.html&quot;&gt;article&lt;/a&gt; by David Ebbo. In his artcile he points to this &lt;a href=&quot;http://yizeng.me/2013/05/10/setup-jekyll-on-windows/&quot;&gt;article&lt;/a&gt; which explains all the steps in detail. The information is perfectly valid at this moment so you can follow that too but I would like to show you a simple way using &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;. The steps are pretty much the same with the article, the only difference is in the way you install the applications.&lt;/p&gt;

&lt;h3&gt;What is Chocolatey ?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Chocolatey is a global PowerShell execution engine using the NuGet packaging infrastructure. Think of it as the ultimate automation tool for Windows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is very simple to install Chocolatey you just have to run this script on your command prompt:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;@powershell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-NoProfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-ExecutionPolicy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unrestricted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-Command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iex ((new-object net.webclient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemdrive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chocolatey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this doesn&amp;#39;t work for you there are other ways to install chocolatey &lt;a href=&quot;https://github.com/chocolatey/chocolatey/wiki/Installation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have chocolatey installed we can open a command prompt and using &lt;code&gt;cinst&lt;/code&gt; we can install what we need. &lt;/p&gt;

&lt;h3&gt;Install Ruby&lt;/h3&gt;

&lt;p&gt;Run the following command on the command prompt:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cinst ruby&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To check if it was installed with success close then open a new command prompt and run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ruby --version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Install Ruby Devkit&lt;/h3&gt;

&lt;p&gt;Here are the steps required to install and configure Devkit:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cinst ruby2.devkit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Initialize and configure by updating &lt;code&gt;config.yml&lt;/code&gt; file from the devkit folder. In the command prompt type the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cd &amp;quot;C:\DevKit2&amp;quot;&lt;/p&gt;

&lt;p&gt;ruby dk.rb init&lt;/p&gt;

&lt;p&gt;notepad config.yml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will open notepad where you need to add &lt;code&gt;- C:\tools\ruby200&lt;/code&gt; at the end of the file. This path represents the location where ruby was installed and it might be different than the one I&amp;#39;ve specified.&lt;/p&gt;

&lt;p&gt;After this step you need to go back to the command prompt and install &lt;a href=&quot;http://guides.rubygems.org/what-is-a-gem/&quot;&gt;gem&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ruby dk.rb review&lt;/p&gt;

&lt;p&gt;ruby dk.rb install&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point you should have gem installed. You can check it this way:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;gem --version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If it&amp;#39;s not working try to close and then open a new command prompt.&lt;/p&gt;

&lt;h3&gt;Install Jekyll&lt;/h3&gt;

&lt;p&gt;Run the following command on the command prompt:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;gem install jekyll&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;What is Pygments ?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Pygments is a generic syntax highlighter for general use in all kinds of software such as forum systems, wikis or other applications that need to prettify source code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pygments is written in python so we need to install Python&lt;/p&gt;

&lt;h3&gt;Install Python&lt;/h3&gt;

&lt;p&gt;Run the following command on the command prompt:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cinst python2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run the following command in a new command prompt to verify installation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;python --version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Install &amp;#39;Easy Install&amp;#39;&lt;/h3&gt;

&lt;p&gt;Easy Install is a mechanism similar with ruby gems or chocolatey for python packages. In order to install it follow the steps:&lt;/p&gt;

&lt;p&gt;1.Download &lt;a href=&quot;https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py&quot;&gt;ez_setup.py&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Run the following command from the location where you saved ez_setup.py&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;python ez_setup.py&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.Set the  &amp;#39;Python Scripts&amp;#39; directory (e.g. &lt;code&gt;C:\tools\python2\Scripts&lt;/code&gt;) to PATH&lt;/p&gt;

&lt;p&gt;4.Verify that easy_install is installed properly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;easy_install --help&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Install Pygments&lt;/h3&gt;

&lt;p&gt;Now that we have python and easy install all we just need to run the following commnad to install pygments:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;easy_install pygments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Start Jekyll&lt;/h3&gt;

&lt;p&gt;You can now create a new Jekyll blog which can be browsed on &lt;a href=&quot;http://localhost:4000&quot;&gt;localhost:4000&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jekyll new myblog&lt;/p&gt;

&lt;p&gt;cd myblog&lt;/p&gt;

&lt;p&gt;jekyll serve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found it much easier to install all this using Chocolatey. I&amp;#39;m keen to get your feedback on this.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The engine behind my blog</title>
   <link href="http://www.romuluscrisan.com/blog/2014/03/03/the-engine-behind-my-blog.html"/>
   <updated>2014-03-03T23:52:21+02:00</updated>
   <id>http://www.romuluscrisan.com/blog/2014/03/03/the-engine-behind-my-blog</id>
   <content type="html">&lt;p class=&quot;dropcap&quot;&gt;I guess it&#39;s time to dive a bit more on what technology stands behind my blog. In the previous posts I&#39;ve talked about the &lt;a href=&quot;http://www.romuluscrisan.com/blog/2014/02/23/why-a-blog.html&quot;&gt;reasons to start a blog&lt;/a&gt;, &lt;a href=&quot;http://www.romuluscrisan.com/blog/2014/02/24/why-i-choose-github-pages.html&quot;&gt;why I choose github pages&lt;/a&gt; to host it and now I will talk about Jekyll, the engine behind my blog.&lt;/p&gt;

&lt;h3&gt;What is Jekyll ?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine which generates static html pages from dynamic components like template or markdown files. It uses a simple inline syntax which at build time is evaluated and replaced resulting a static page. Here is a short and very simple example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above example the value for the title tag will be set with the value of the title property of the page object. Jekyll has a simple and limited syntax so it&amp;#39;s quit easy to learn it, but it has great flexibility with lots of options on how to build the site. Also you can have partial files which Jekyll will combine at build time.&lt;/p&gt;

&lt;p&gt;Jekyll has a special folder structure which is used in order to generate the static website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt; folder is used to define partial files which can then be added to various pages. Some possible partial files might be the footer or header which for sure will be nice to define in one place and use on all pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_layout&lt;/strong&gt; folder is pretty self explanatory and is the location where you will define the layouts of your pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt; folder is the location from where dynamic content/posts will be saved. Jekyll uses a markup language like Markdown for this kind of files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_drafts&lt;/strong&gt; folder is where the working in progress stuff will be held since this location will not be evaluated at build unless &lt;code&gt;--draft&lt;/code&gt; is specified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt; folder is the location from where Jekyll will serve the static pages. During the build process Jekyll will combine partial files and evaluate the syntax producing a static html file which will be saved in this folder.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Jekyll and Github pages&lt;/h3&gt;

&lt;p&gt;Jekyll can be installed locally and since it has a small static webserver embedded it can be used in lots of ways to serve the website. Using &lt;code&gt;jekyll serve&lt;/code&gt; you can build and browse the site. Beside this option you can use the site developed with Jekyll directly with Github pages since behind the scenes it uses Jekyll. So all you have to do is push your site developed with jekyll to a repository and Github will do the trick almost instant. Please be aware that this is not true for all Github repositories, it&amp;#39;s only valid for Github pages repositories which must be created according to this &lt;a href=&quot;http://pages.github.com/&quot;&gt;steps&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;My intention with this article was to give a high overview of what Jekyll means and some basic principles. If you are looking for more details please have a look &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://jekyllbootstrap.com/lessons/jekyll-introduction.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions please don&amp;#39;t hesitate and leave a comment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why I choose Github pages</title>
   <link href="http://www.romuluscrisan.com/blog/2014/02/24/why-i-choose-github-pages.html"/>
   <updated>2014-02-24T23:52:21+02:00</updated>
   <id>http://www.romuluscrisan.com/blog/2014/02/24/why-i-choose-github-pages</id>
   <content type="html">&lt;p class=&quot;dropcap&quot;&gt;Github pages is something I&#39;ve recently heard of and I really like it from the begging although I didn&#39;t exactly knew how is working. The main idea is that you will use a github repository to serve your site or blog.&lt;/p&gt;

&lt;h3&gt;Main benefits&lt;/h3&gt;

&lt;p&gt;For me these are the main benefits in using github pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I have complete control of my site not being constrained in any way by a blogging platform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No database is involved since github pages will serve only static html. Pages will be produced using &lt;a href=&quot;http://jekyllrb.com/&quot; title=&quot;jekyll&quot;&gt;Jekyll&lt;/a&gt; (more on this in future post).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It&amp;#39;s completely free so I don&amp;#39;t need to bother looking for hosting options. And it has very &lt;a href=&quot;http://www.jeremymorgan.com/blog/programming/how-fast-are-github-pages/&quot; title=&quot;good performance&quot;&gt;good performance&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It uses &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; title=&quot;markdown&quot;&gt;markdown&lt;/a&gt; for create and edit posts. Beside that github offers in-browser support for markdown which means that I can create or edit posts directly from browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since github pages uses github &lt;a href=&quot;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&quot;&gt;repositories&lt;/a&gt; it means that anyone can contribute to the website by sending a &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot; title=&quot;pull request&quot;&gt;pull request&lt;/a&gt;. So please fell free to send any changes or if you see any spelling errors you can directly correct them, all you need to do is go to the &lt;a href=&quot;https://github.com/cromica/cromica.github.io&quot; title=&quot;repository&quot;&gt;repository&lt;/a&gt; and submit a &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot; title=&quot;pull request&quot;&gt;pull request&lt;/a&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If anyone has any suggestions on various features I can add or any changes please let me know by creating an &lt;a href=&quot;https://github.com/cromica/cromica.github.io/issues&quot;&gt;issue&lt;/a&gt; or &lt;a href=&quot;http://romuluscrisan.com/index.html#contact&quot;&gt;drop me a line&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really like github pages because it&amp;#39;s very simple to use and it&amp;#39;s emphasizes collaboration so anyone can become a contributor to the blog.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why a blog</title>
   <link href="http://www.romuluscrisan.com/blog/2014/02/23/why-a-blog.html"/>
   <updated>2014-02-23T22:54:21+02:00</updated>
   <id>http://www.romuluscrisan.com/blog/2014/02/23/why-a-blog</id>
   <content type="html">&lt;p class=&quot;dropcap&quot;&gt;I was thinking to start a blog for some while but never find the right time. There are lots of ways to share information and knowledge but blog allows to share information in detail and also provide thorough explanations. Besides this I intend to use it as a personal knowledge base. Quite often I realize that I&#39;ve done something similar in the past but I can&#39;t remember or find the information. So finally here it is.&lt;/p&gt;

&lt;h3&gt;The Journey&lt;/h3&gt;

&lt;p&gt;There are quite a few things to think about when deciding to have a blog, like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What will I write about?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What blogging platform should I use?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since I&amp;#39;m a developer should I build something of my own? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where I will host it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What&amp;#39;s the design of the blog ?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There some other smaller things but those where the main questions for me. For the first one I&amp;#39;ve answered in the first paragraph but let&amp;#39;s see a bit about the other questions. First of all I&amp;#39;m not a big &lt;a href=&quot;http://wordpress.com/&quot; title=&quot;Wordpress&quot;&gt;Wordpress&lt;/a&gt; fan although I&amp;#39;ve used it in the past. This is not because it&amp;#39;s bad rather it&amp;#39;s a mater of taste. Next I had a look at &lt;a href=&quot;https://ghost.org/&quot; title=&quot;Ghost&quot;&gt;Ghost&lt;/a&gt; which is really interesting and nice. There are some other good blogging platforms like &lt;a href=&quot;https://www.blogger.com/features&quot; title=&quot;Blogger&quot;&gt;Blogger&lt;/a&gt; or &lt;a href=&quot;https://www.tumblr.com/&quot; title=&quot;Tumblr&quot;&gt;Tumblr&lt;/a&gt; and I have to admit that it&amp;#39;s hard to decide between them but I wanted to have more control so just a blogging platform was a no go for me. Building something of my own was interesting enough but I quickly realize that I don&amp;#39;t have enough time to do it so I abandoned the idea. Looking for other option I read &lt;a href=&quot;http://blog.davidebbo.com/about/&quot; title=&quot;David Ebbo&quot;&gt;David Ebbo&lt;/a&gt; was &lt;a href=&quot;http://blog.davidebbo.com/2014/01/moving-to-github-pages.html&quot; title=&quot;Moving to GitHub pages&quot;&gt;moving his site to Github pages&lt;/a&gt; and decided to have a look. I really liked the way Github pages is working and I will tell more about this on future posts.&lt;/p&gt;

&lt;p&gt;So at this point my blog is hosted by Github pages and this is just the first version of it. I will add some other features in the next weeks. &lt;/p&gt;
</content>
 </entry>
 
 
</feed>